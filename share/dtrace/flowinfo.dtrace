#!/usr/bin/env dtrace -Zs 

#pragma D option quiet

self int depth;

dtrace:::BEGIN
{
	printf("%10s %5s %-8s -- %s\n", 
            "DELTA(us)", "FLAGS", "TYPE", "NAME");
}

R*:::function-entry,
R*:::function-return
/ self->last == 0 /
{
	self->last = timestamp;
}


R*:::function-entry 
{ 
	this->delta = (timestamp - self->last) / 1000;

	printf("%10d %5d %-8s %*s-> %s (loc: %s)\n", 
            this->delta, 
            arg2,
            "function", 
            self->depth * 2, "",
            copyinstr(arg0), 
	        copyinstr(arg1));

	self->depth++;
	self->last = timestamp;
}

R*:::force-promise-entry 
{ 
	this->delta = (timestamp - self->last) / 1000;

	printf("%10d %5d %-8s %*s   %s\n", 
            this->delta, 
            0,
            "promise", 
            self->depth * 2, "",
            copyinstr(arg0));

	self->depth++;
	self->last = timestamp;
}

R*:::force-promise-exit
{ 
   	this->delta = (timestamp - self->last) / 1000;
	self->depth -= self->depth > 0 ? 1 : 0;

	printf("%10d %5d %-8s %*s   %s = `%s` (type: %d)\n", 
            this->delta, 
            0,
            "promise", 
            self->depth * 2, "",
	    copyinstr(arg0),
            copyinstr(arg2),
            arg1);

	self->last = timestamp;
}

R*:::function-exit 
{ 
   	this->delta = (timestamp - self->last) / 1000;
	self->depth -= self->depth > 0 ? 1 : 0;

	printf("%10d %5d %-8s %*s<- %s = `%s` (%d) (loc: %s)\n", 
            this->delta, 
            arg2,
            "function", 
            self->depth * 2, "",
	        copyinstr(arg0),
            copyinstr(arg4),
            arg3,
            copyinstr(arg1));

	self->last = timestamp;  
}