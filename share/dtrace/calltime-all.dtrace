#!/usr/sbin/dtrace -Zs

#pragma D option quiet
#pragma D option dynvarsize=2g

dtrace:::BEGIN
{
	printf("Tracing R... Hit Ctrl+c to exit.\n");
}

R*:::function-entry,
R*:::builtin-entry
{
	self->depth++;
	self->exclude[self->depth] = 0;
	self->function[self->depth] = timestamp;
}

R*:::function-exit,
R*:::builtin-exit
/ self->function[self->depth] /
{
	this->elapsed_incl = timestamp - self->function[self->depth];
	this->elapsed_excl = this->elapsed_incl - self->exclude[self->depth];
	self->function[self->depth] = 0;
	self->exclude[self->depth] = 0;
	this->name = copyinstr(arg0);
    this->type = substr(probename, 0, index(probename, "-"));

	@num[this->type, this->name] = count();
	@num["total", "total"] = count();
	@types_incl[this->type, this->name] = sum(this->elapsed_incl);
	@types_excl[this->type, this->name] = sum(this->elapsed_excl);
	@types_excl["total", "total"] = sum(this->elapsed_excl);

	self->depth--;
	self->exclude[self->depth] += this->elapsed_incl;
}

dtrace:::END
{
	printf("\nCount\n");
	printf("   %-10s %-32s %8s\n", "TYPE", "NAME", "COUNT");
	printa("   %-10s %-32s %@8d\n", @num);

	normalize(@types_excl, 1000);
	printf("\nExclusive function elapsed times (us)\n");
	printf("   %-10s %-32s %8s\n", "TYPE", "NAME", "TOTAL");
	printa("   %-10s %-32s %@8d\n", @types_excl);

	normalize(@types_incl, 1000);
	printf("\nInclusive function elapsed times (us)\n");
	printf("   %-10s %-32s %8s\n", "TYPE", "NAME", "TOTAL");
	printa("   %-10s %-32s %@8d\n", @types_incl);
}
