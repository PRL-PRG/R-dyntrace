cmake_minimum_required(VERSION 3.0)
project(rdt_promises)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR})
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -g3 -ggdb")

# This is not ideal. Our build now depends on config.h generated by R's configure.
# If we wanted to use cmake exclusively though, we would
# have to recreate all the autoconf checks that GNU R performs.
add_definitions(-DHAVE_CONFIG_H)


# Find SQLITE:

# Look for the header file.
find_path(SQLITE3_INCLUDE_DIR NAMES sqlite3.h)

# Look for the library.
find_library(SQLITE3_LIBRARY NAMES sqlite3)


set(SOURCE_FILES
        src/rdt_promises.cpp
        src/rdt_promises.h
        src/tracer_conf.h
        src/tracer_state.h
        src/tracer_sexpinfo.h
        src/tracer_state.cpp
        src/tracer_sexpinfo.cpp
        src/tracer_conf.cpp
        src/recorder.h
        src/tuple_for_each.h
        src/trace_recorder.h
        src/trace_recorder.cpp
        src/psql_recorder.h
        src/psql_recorder.cpp
        src/sql_recorder.h
        src/sql_recorder.cpp
        src/sql_generator.cpp
        src/sql_generator.h
        src/multiplexer.cpp
        src/multiplexer.h
        src/tools.h
        src/tools.cpp)

# R include paths (in our R-dyntrace repo)
include_directories(../../src/library/rdt/src)
include_directories(../../src/main)
include_directories(../../include)
include_directories(../../include/R_ext)
include_directories(../../src/include)
include_directories(../../src/include/R_ext)
include_directories(../../src/include/Rmodules)
include_directories(../../src/include/vg)

# Include SQLITE
include_directories(SQLITE3_INCLUDE_DIR)

# Add library target
add_library(rdt_promises SHARED ${SOURCE_FILES})

# Link SQLITE
target_link_libraries(rdt_promises ${SQLITE3_LIBRARY})

# This tells the linker not to complain about undefined symbols
# which are from the loader module (R in this case).
# It's needed because this is a plugin library that will call
# back to R API but we cannot link against it at compile time.
if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    message(STATUS "Setting '-undefined dynamic_lookup' for clang")
    set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} -undefined dynamic_lookup")
endif()
