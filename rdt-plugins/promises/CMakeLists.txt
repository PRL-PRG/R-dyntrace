cmake_minimum_required(VERSION 3.0)
project(rdt-promises)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/lib")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -g3 -ggdb")

# This is not ideal. Our build now depends on config.h generated by R's configure.
# If we wanted to use cmake exclusively though, we would
# have to recreate all the autoconf checks that GNU R performs.
add_definitions(-DHAVE_CONFIG_H)

set(SOURCE_FILES
    src/sqlite/sqlite3.h
    src/sqlite/sqlite3ext.h
    src/sqlite/sqlite3.c
    src/sqlite/shell.c
    src/utilities.hpp
    src/utilities.cpp
    src/hooks.hpp
    src/hooks.cpp
    src/globals.hpp
    src/globals.cpp
    src/tracer.cpp
    src/tracer.hpp
    src/recorder.hpp
    src/recorder.cpp
    src/State.hpp
    src/helpers.cpp
    src/State.cpp
    src/SqlSerializer.hpp
    src/SqlSerializer.cpp)

# R include paths (in our R-dyntrace repo)
include_directories(src/sqlite)
include_directories(../../src/library/rdt/src)
include_directories(../../src/main)
include_directories(../../include)
include_directories(../../include/R_ext)
include_directories(../../src/include)
include_directories(../../src/include/R_ext)
include_directories(../../src/include/Rmodules)
include_directories(../../src/include/vg)

# Add library target
add_library(rdt-promises SHARED ${SOURCE_FILES})

# This tells the linker not to complain about undefined symbols
# which are from the loader module (R in this case).
# It's needed because this is a plugin library that will call
# back to R API but we cannot link against it at compile time.
if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    message(STATUS "Setting '-undefined dynamic_lookup' for clang")
    set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} -undefined dynamic_lookup")
endif()
